/* main strings */

const char *s_header = "#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<regex.h>\n";
const char *s_macros = "/*                      */\n#define BLEN 1024\n#ifndef FLL\n#define FLL 256\n#endif\n\n";
const char *s_mainS = "int main(int argc, char *argv[]) {\n\tFILE *fin = fopen(argv[1], \"r\");\n\tchar buffer[BLEN], holdsp[BLEN];\n\tint n=1, read=1, flags[FLL], subf=0;\n\tmemset(flags, 0, 1024);\n\tholdsp[0]='\\0';\n";
const char *s_mainE = "\t\tif(argc!=3||argv[2][1]!='n')\n\t\t\tprintf(\"%s\", buffer);\n\t\tn++;\n\t}\n\treturn 0;\n}\n";
const char *s_mloop = "\n\twhile(read==0||fgets(buffer, BLEN, fin)) {\n\t\tread=1;\n";

/* function strings */
const char *s_eqcmd = "printf(\"%d\\n\", n);\n";
//acmd, bcmd, ccmd, dcmd
const char *s_cdcmd = "char *tptr = strchr(buffer, '\\n'); if(*tptr==buffer[strlen(buffer)-1]) {n++;continue;} else { read=0; strcpy(buffer, (tptr+1));continue;}\n";
//FNCMD, gcmd,cgcmd, hcmd, chcmd, icmd
const char *s_lcmd = "\t\t";//TODO: add formatting
const char *s_ncmd="printf(\"%s\", buffer);if(!fgets(buffer, BLEN, fin)){return 0;} n++;\n";
const char *s_cncmd="char tmprsp[BLEN];if(!fgets(tmprsp, BLEN, fin)){return 0;} strcat(buffer, tmprsp);n++;\n";
const char *s_regec1="\t\t\tregex_t regex;\n\t\t\tint reti;\n\t\t\treti = regcomp(&regex, regc, 0);\n\t\t\tif(reti) {\n\t\t\t\tfprintf(stderr, \"Could not compile regex\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\treti = regexec(&regex, buffer, 0, NULL, 0);\n\t\t\tif(!reti) {\n\t\t\t\treti = regcomp(&regex, regc2, 0);\n\t\t\t\tif(reti) {\n\t\t\t\t\tfprintf(stderr, \"Could not compile regex\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\treti = regexec(&regex, buffer, 0, NULL, 0);\n\t\t\t\tif(!reti)\n\t\t\t\t\tflags[lpn]=2;\n\t\t\t\telse if(reti == REG_NOMATCH)\n\t\t\t\t\tflags[lpn]=1;\n\t\t\t\telse {\n\t\t\t\t\tregerror(reti, &regex, buffer, sizeof(buffer));\n\t\t\t\t\tfprintf(stderr, \"Regex match failed: %s\\n\", buffer);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (reti == REG_NOMATCH) {} \n\t\t\telse {\n\t\t\t\tregerror(reti, &regex, buffer, sizeof(buffer));\n\t\t\t\tfprintf(stderr, \"Regex match failed: %s\\n\", buffer);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tregfree(&regex);\n";
const char *s_regec2="\t\t\tregex_t regex;\n\t\t\tint reti;\n\t\t\treti = regcomp(&regex, regc, 0);\n\t\t\tif(reti){\n\t\t\t\tfprintf(stderr, \"Could not compile regex\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\treti = regexec(&regex, buffer, 0, NULL, 0);\n\t\t\tif(!reti)\n\t\t\t\tflags[lpn]=2; \n\t\t\telse if(reti == REG_NOMATCH) {} \n\t\t\telse {\n\t\t\t\tregerror(reti, &regex, buffer, sizeof(buffer));\n\t\t\t\tfprintf(stderr, \"Regex match failed: %s\\n\", buffer);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tregfree(&regex);\n";
const char *s_regec3="\t\t\tregex_t regex;\n\t\t\tint reti;\n\t\t\treti = regcomp(&regex, regc, 0);\n\t\t\tif(reti) {\n\t\t\t\tfprintf(stderr, \"Could not compile regex\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\treti = regexec(&regex, buffer, 0, NULL, 0);\n\t\t\tif(!reti) {flags[lpn]=1;} \n\t\t\telse if(reti == REG_NOMATCH) {} \n\t\t\telse {\n\t\t\t\tregerror(reti, &regex, buffer, sizeof(buffer));\n\t\t\t\tfprintf(stderr, \"Regex match failed: %s\\n\", buffer);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tregfree(&regex);\n";
const char *s_regec4="\t\t\tregex_t regex;\n\t\t\tint reti;\n\t\t\treti = regcomp(&regex, regc, 0);\n\t\t\tif(reti){\n\t\t\t\tfprintf(stderr, \"Could not compile regex\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\treti = regexec(&regex, buffer, 0, NULL, 0);\n\t\t\tif(!reti)\n\t\t\t\tflags[lpn]=2; \n\t\t\telse if (reti == REG_NOMATCH) {} \n\t\t\telse {\n\t\t\t\tregerror(reti, &regex, buffer, sizeof(buffer));\n\t\t\t\tfprintf(stderr, \"Regex match failed: %s\\n\", buffer);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tregfree(&regex);\n";
const char *s_regec5="\t\t\tregex_t regex;\n\t\t\tint reti;\n\t\t\treti = regcomp(&regex, regc, 0);\n\t\t\tif(reti) {\n\t\t\t\tfprintf(stderr, \"Could not compile regex\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\treti = regexec(&regex, buffer, 0, NULL, 0);\n\t\t\tif(!reti)\n\t\t\t\ttif=1;\n\t\t\telse if (reti == REG_NOMATCH) {}\n\t\t\telse {\n\t\t\t\tregerror(reti, &regex, buffer, sizeof(buffer));\n\t\t\t\tfprintf(stderr, \"Regex match failed: %s\\n\", buffer);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tregfree(&regex);\n\t\t}\n";
const char *s_ss="int p=0;	char *buffc=malloc(sizeof(buffer));	memset(buffc, '\0', sizeof(buffc)/sizeof(char));	int ms=0;	regex_t regex;	size_t nmatch=9;	regmatch_t pm[nmatch];	int reti;	if(cs==1) {		reti = regcomp(&regex, r1, REG_ICASE);	}	else {		reti = regcomp(&regex, r1, 0);	}	if(reti) {		fprintf(stderr, \"Could not compile regex\n\");		exit(1);	}	reti = regexec(&regex, buffer, nmatch, pm, 0);	int r=0, ni=0;	while(!reti&&ni<limit) {		r=1;		subf=1;		for(int i=0; i<nmatch; i++) {			if(pm[i].rm_so==-1) {				ms=i-1;				break;			}		}		p=0;		for(int i=0; i<strlen(r2); i++) {			if(r2[i]=='\\'&&(r2[i+1]>'9'||r2[i+1]<'1')) {				buffc[p]=r2[i];				buffc[p+1]=r2[i+1];				p+=2;				i++;			}			else if(r2[i]=='\\'&&r2[i+1]<='9'&&r2[i+1]>'0') {				int q=r2[i+1]-'0';				sprintf(&buffc[p],\"%*.*s\", pm[q].rm_eo-pm[q].rm_so, pm[q].rm_eo-pm[q].rm_so, &buffer[pm[q].rm_so]);				p+= pm[q].rm_eo-pm[q].rm_so;				i++;}			else if(r2[i]=='&') {				int q=0;				sprintf(&buffc[p],\"%*.*s\", pm[q].rm_eo-pm[q].rm_so, pm[q].rm_eo-pm[q].rm_so, &buffer[pm[q].rm_so]);				p+= pm[q].rm_eo-pm[q].rm_so;			}			else {				buffc[p]=r2[i];				p++;			}						}		buffc[p]='\0';		char *bufd=strdup(buffer);		if(nth==0||nth==(ni+1)) {			sprintf(buffer,\"%*.*s%s%s\", pm[0].rm_so, pm[0].rm_so, bufd, buffc, &bufd[pm[0].rm_eo]);		}		ni++;	reti = regexec(&regex, buffer+pm[0].rm_eo, nmatch, pm, REG_NOTBOL);	}	if(r==1&&pr==1) {		printf(\"%s\n\", buffer);	}	if (reti == REG_NOMATCH) {if(r==0){subf=0;}}	else {		regerror(reti, &regex, buffer, sizeof(buffer));		fprintf(stderr, \"Regex match failed: %s\n\", buffer);		exit(1);	}	regfree(&regex);}";
/*
regex1, regex2
0 0 -0
1 0 -1
1 1 -2 exit here make -3

*/
